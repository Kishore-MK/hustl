{"ast":null,"code":"!function (e, r) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = r() : \"function\" == typeof define && define.amd ? define([], r) : \"object\" == typeof exports ? exports.freighterApi = r() : e.freighterApi = r();\n}(this, () => (() => {\n  \"use strict\";\n\n  var e,\n    r,\n    E = {\n      d: (e, r) => {\n        for (var o in r) E.o(r, o) && !E.o(e, o) && Object.defineProperty(e, o, {\n          enumerable: !0,\n          get: r[o]\n        });\n      },\n      o: (e, r) => Object.prototype.hasOwnProperty.call(e, r),\n      r: e => {\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n          value: \"Module\"\n        }), Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        });\n      }\n    },\n    o = {};\n  E.r(o), E.d(o, {\n    default: () => I,\n    getNetwork: () => N,\n    getNetworkDetails: () => s,\n    getPublicKey: () => _,\n    getUserInfo: () => R,\n    isAllowed: () => C,\n    isBrowser: () => c,\n    isConnected: () => n,\n    requestAccess: () => i,\n    setAllowed: () => O,\n    signAuthEntry: () => S,\n    signBlob: () => A,\n    signTransaction: () => t\n  }), function (e) {\n    e.CREATE_ACCOUNT = \"CREATE_ACCOUNT\", e.FUND_ACCOUNT = \"FUND_ACCOUNT\", e.ADD_ACCOUNT = \"ADD_ACCOUNT\", e.IMPORT_ACCOUNT = \"IMPORT_ACCOUNT\", e.IMPORT_HARDWARE_WALLET = \"IMPORT_HARDWARE_WALLET\", e.LOAD_ACCOUNT = \"LOAD_ACCOUNT\", e.MAKE_ACCOUNT_ACTIVE = \"MAKE_ACCOUNT_ACTIVE\", e.UPDATE_ACCOUNT_NAME = \"UPDATE_ACCOUNT_NAME\", e.GET_MNEMONIC_PHRASE = \"GET_MNEMONIC_PHRASE\", e.CONFIRM_MNEMONIC_PHRASE = \"CONFIRM_MNEMONIC_PHRASE\", e.CONFIRM_MIGRATED_MNEMONIC_PHRASE = \"CONFIRM_MIGRATED_MNEMONIC_PHRASE\", e.RECOVER_ACCOUNT = \"RECOVER_ACCOUNT\", e.CONFIRM_PASSWORD = \"CONFIRM_PASSWORD\", e.REJECT_ACCESS = \"REJECT_ACCESS\", e.GRANT_ACCESS = \"GRANT_ACCESS\", e.SIGN_TRANSACTION = \"SIGN_TRANSACTION\", e.SIGN_BLOB = \"SIGN_BLOB\", e.SIGN_AUTH_ENTRY = \"SIGN_AUTH_ENTRY\", e.HANDLE_SIGNED_HW_TRANSACTION = \"HANDLE_SIGNED_HW_TRANSACTION\", e.REJECT_TRANSACTION = \"REJECT_TRANSACTION\", e.SIGN_FREIGHTER_TRANSACTION = \"SIGN_FREIGHTER_TRANSACTION\", e.SIGN_FREIGHTER_SOROBAN_TRANSACTION = \"SIGN_FREIGHTER_SOROBAN_TRANSACTION\", e.ADD_RECENT_ADDRESS = \"ADD_RECENT_ADDRESS\", e.LOAD_RECENT_ADDRESSES = \"LOAD_RECENT_ADDRESSES\", e.SIGN_OUT = \"SIGN_OUT\", e.SHOW_BACKUP_PHRASE = \"SHOW_BACKUP_PHRASE\", e.SAVE_ALLOWLIST = \"SAVE_ALLOWLIST\", e.SAVE_SETTINGS = \"SAVE_SETTINGS\", e.LOAD_SETTINGS = \"LOAD_SETTINGS\", e.GET_CACHED_ASSET_ICON = \"GET_CACHED_ASSET_ICON\", e.CACHE_ASSET_ICON = \"CACHE_ASSET_ICON\", e.GET_CACHED_ASSET_DOMAIN = \"GET_CACHED_ASSET_DOMAIN\", e.CACHE_ASSET_DOMAIN = \"CACHE_ASSET_DOMAIN\", e.GET_BLOCKED_ACCOUNTS = \"GET_BLOCKED_ACCOUNTS\", e.GET_BLOCKED_DOMAINS = \"GET_BLOCKED_DOMAINS\", e.ADD_CUSTOM_NETWORK = \"ADD_CUSTOM_NETWORK\", e.CHANGE_NETWORK = \"CHANGE_NETWORK\", e.REMOVE_CUSTOM_NETWORK = \"REMOVE_CUSTOM_NETWORK\", e.EDIT_CUSTOM_NETWORK = \"EDIT_CUSTOM_NETWORK\", e.RESET_EXP_DATA = \"RESET_EXP_DATA\", e.ADD_TOKEN_ID = \"ADD_TOKEN_ID\", e.GET_TOKEN_IDS = \"GET_TOKEN_IDS\", e.REMOVE_TOKEN_ID = \"REMOVE_TOKEN_ID\", e.GET_MIGRATABLE_ACCOUNTS = \"GET_MIGRATABLE_ACCOUNTS\", e.GET_MIGRATED_MNEMONIC_PHRASE = \"GET_MIGRATED_MNEMONIC_PHRASE\", e.MIGRATE_ACCOUNTS = \"MIGRATE_ACCOUNTS\";\n  }(e || (e = {})), function (e) {\n    e.REQUEST_ACCESS = \"REQUEST_ACCESS\", e.REQUEST_PUBLIC_KEY = \"REQUEST_PUBLIC_KEY\", e.SUBMIT_TRANSACTION = \"SUBMIT_TRANSACTION\", e.SUBMIT_BLOB = \"SUBMIT_BLOB\", e.SUBMIT_AUTH_ENTRY = \"SUBMIT_AUTH_ENTRY\", e.REQUEST_NETWORK = \"REQUEST_NETWORK\", e.REQUEST_NETWORK_DETAILS = \"REQUEST_NETWORK_DETAILS\", e.REQUEST_CONNECTION_STATUS = \"REQUEST_CONNECTION_STATUS\", e.REQUEST_ALLOWED_STATUS = \"REQUEST_ALLOWED_STATUS\", e.SET_ALLOWED_STATUS = \"SET_ALLOWED_STATUS\", e.REQUEST_USER_INFO = \"REQUEST_USER_INFO\";\n  }(r || (r = {}));\n  const T = e => {\n      const E = Date.now() + Math.random();\n      return window.postMessage({\n        source: \"FREIGHTER_EXTERNAL_MSG_REQUEST\",\n        messageId: E,\n        ...e\n      }, window.location.origin), new Promise(o => {\n        let T = 0;\n        e.type !== r.REQUEST_CONNECTION_STATUS && e.type !== r.REQUEST_PUBLIC_KEY || (T = setTimeout(() => {\n          o({\n            isConnected: !1,\n            publicKey: \"\"\n          }), window.removeEventListener(\"message\", _);\n        }, 2e3));\n        const _ = e => {\n          var r, t;\n          e.source === window && \"FREIGHTER_EXTERNAL_MSG_RESPONSE\" === (null === (r = null == e ? void 0 : e.data) || void 0 === r ? void 0 : r.source) && (null === (t = null == e ? void 0 : e.data) || void 0 === t ? void 0 : t.messagedId) === E && (o(e.data), window.removeEventListener(\"message\", _), clearTimeout(T));\n        };\n        window.addEventListener(\"message\", _, !1);\n      });\n    },\n    _ = () => c ? (async () => {\n      let e = {\n        publicKey: \"\",\n        error: \"\"\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_PUBLIC_KEY\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n        publicKey: E,\n        error: o\n      } = e;\n      if (o) throw o;\n      return E;\n    })() : Promise.resolve(\"\"),\n    t = (e, E) => c ? (async (e, E, o) => {\n      let _ = \"\",\n        t = \"\",\n        A = \"\";\n      \"object\" == typeof E ? (_ = E.network || \"\", t = E.accountToSign || \"\", A = E.networkPassphrase || \"\") : (_ = E || \"\", t = \"\");\n      let S = {\n        signedTransaction: \"\",\n        error: \"\"\n      };\n      try {\n        S = await T({\n          transactionXdr: e,\n          network: _,\n          networkPassphrase: A,\n          accountToSign: t,\n          type: r.SUBMIT_TRANSACTION\n        });\n      } catch (e) {\n        throw console.error(e), e;\n      }\n      const {\n        signedTransaction: n,\n        error: N\n      } = S;\n      if (N) throw N;\n      return n;\n    })(e, E) : Promise.resolve(\"\"),\n    A = (e, E) => c ? (async (e, E) => {\n      let o = {\n        signedBlob: \"\",\n        error: \"\"\n      };\n      const _ = (E || {}).accountToSign || \"\";\n      try {\n        o = await T({\n          blob: e,\n          accountToSign: _,\n          type: r.SUBMIT_BLOB\n        });\n      } catch (e) {\n        throw console.error(e), e;\n      }\n      const {\n        signedBlob: t,\n        error: A\n      } = o;\n      if (A) throw A;\n      return t;\n    })(e, E) : Promise.resolve(\"\"),\n    S = (e, E) => c ? (async (e, E) => {\n      let o = {\n        signedAuthEntry: \"\",\n        error: \"\"\n      };\n      const _ = (E || {}).accountToSign || \"\";\n      try {\n        o = await T({\n          entryXdr: e,\n          accountToSign: _,\n          type: r.SUBMIT_AUTH_ENTRY\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n        signedAuthEntry: t,\n        error: A\n      } = o;\n      if (A) throw A;\n      return t;\n    })(e, E) : Promise.resolve(\"\"),\n    n = () => c ? window.freighter ? Promise.resolve(window.freighter) : (async () => {\n      let e = {\n        isConnected: !1\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_CONNECTION_STATUS\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      return e.isConnected;\n    })() : Promise.resolve(!1),\n    N = () => c ? (async () => {\n      let e = {\n        network: \"\",\n        error: \"\"\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_NETWORK\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n        network: E,\n        error: o\n      } = e;\n      if (o) throw o;\n      return E;\n    })() : Promise.resolve(\"\"),\n    s = () => c ? (async () => {\n      let e = {\n        networkDetails: {\n          network: \"\",\n          networkName: \"\",\n          networkUrl: \"\",\n          networkPassphrase: \"\",\n          sorobanRpcUrl: void 0\n        },\n        error: \"\"\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_NETWORK_DETAILS\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n          networkDetails: E,\n          error: o\n        } = e,\n        {\n          network: _,\n          networkUrl: t,\n          networkPassphrase: A,\n          sorobanRpcUrl: S\n        } = E;\n      if (o) throw o;\n      return {\n        network: _,\n        networkUrl: t,\n        networkPassphrase: A,\n        sorobanRpcUrl: S\n      };\n    })() : Promise.resolve({\n      network: \"\",\n      networkUrl: \"\",\n      networkPassphrase: \"\",\n      sorobanRpcUrl: \"\"\n    }),\n    C = () => c ? (async () => {\n      let e = {\n        isAllowed: !1\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_ALLOWED_STATUS\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      return e.isAllowed;\n    })() : Promise.resolve(!1),\n    O = () => c ? (async () => {\n      let e = {\n        isAllowed: !1,\n        error: \"\"\n      };\n      try {\n        e = await T({\n          type: r.SET_ALLOWED_STATUS\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n        isAllowed: E,\n        error: o\n      } = e;\n      if (o) throw o;\n      return E;\n    })() : Promise.resolve(!1),\n    R = () => c ? (async () => {\n      let e = {\n        userInfo: {\n          publicKey: \"\"\n        },\n        error: \"\"\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_USER_INFO\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n        userInfo: E,\n        error: o\n      } = e;\n      if (o) throw o;\n      return E;\n    })() : Promise.resolve({\n      publicKey: \"\"\n    }),\n    i = () => c ? (async () => {\n      let e = {\n        publicKey: \"\",\n        error: \"\"\n      };\n      try {\n        e = await T({\n          type: r.REQUEST_ACCESS\n        });\n      } catch (e) {\n        console.error(e);\n      }\n      const {\n        publicKey: E,\n        error: o\n      } = e;\n      if (o) throw o;\n      return E;\n    })() : Promise.resolve(\"\"),\n    c = \"undefined\" != typeof window,\n    I = {\n      getPublicKey: _,\n      signTransaction: t,\n      signBlob: A,\n      signAuthEntry: S,\n      isConnected: n,\n      getNetwork: N,\n      getNetworkDetails: s,\n      isAllowed: C,\n      setAllowed: O,\n      getUserInfo: R,\n      requestAccess: i\n    };\n  return o;\n})());","map":{"version":3,"names":["e","r","exports","module","define","amd","freighterApi","E","d","__webpack_require__","o","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","Symbol","toStringTag","value","CREATE_ACCOUNT","FUND_ACCOUNT","ADD_ACCOUNT","IMPORT_ACCOUNT","IMPORT_HARDWARE_WALLET","LOAD_ACCOUNT","MAKE_ACCOUNT_ACTIVE","UPDATE_ACCOUNT_NAME","GET_MNEMONIC_PHRASE","CONFIRM_MNEMONIC_PHRASE","CONFIRM_MIGRATED_MNEMONIC_PHRASE","RECOVER_ACCOUNT","CONFIRM_PASSWORD","REJECT_ACCESS","GRANT_ACCESS","SIGN_TRANSACTION","SIGN_BLOB","SIGN_AUTH_ENTRY","HANDLE_SIGNED_HW_TRANSACTION","REJECT_TRANSACTION","SIGN_FREIGHTER_TRANSACTION","SIGN_FREIGHTER_SOROBAN_TRANSACTION","ADD_RECENT_ADDRESS","LOAD_RECENT_ADDRESSES","SIGN_OUT","SHOW_BACKUP_PHRASE","SAVE_ALLOWLIST","SAVE_SETTINGS","LOAD_SETTINGS","GET_CACHED_ASSET_ICON","CACHE_ASSET_ICON","GET_CACHED_ASSET_DOMAIN","CACHE_ASSET_DOMAIN","GET_BLOCKED_ACCOUNTS","GET_BLOCKED_DOMAINS","ADD_CUSTOM_NETWORK","CHANGE_NETWORK","REMOVE_CUSTOM_NETWORK","EDIT_CUSTOM_NETWORK","RESET_EXP_DATA","ADD_TOKEN_ID","GET_TOKEN_IDS","REMOVE_TOKEN_ID","GET_MIGRATABLE_ACCOUNTS","GET_MIGRATED_MNEMONIC_PHRASE","MIGRATE_ACCOUNTS","REQUEST_ACCESS","REQUEST_PUBLIC_KEY","SUBMIT_TRANSACTION","SUBMIT_BLOB","SUBMIT_AUTH_ENTRY","REQUEST_NETWORK","REQUEST_NETWORK_DETAILS","REQUEST_CONNECTION_STATUS","REQUEST_ALLOWED_STATUS","SET_ALLOWED_STATUS","REQUEST_USER_INFO","T","Date","now","Math","random","window","postMessage","source","messageId","location","origin","Promise","type","setTimeout","isConnected","publicKey","removeEventListener","_","data","t","messagedId","clearTimeout","addEventListener","getPublicKey","c","error","console","resolve","signTransaction","A","network","accountToSign","networkPassphrase","S","signedTransaction","transactionXdr","n","N","signBlob","signedBlob","blob","signAuthEntry","signedAuthEntry","entryXdr","freighter","getNetwork","s","getNetworkDetails","networkDetails","networkName","networkUrl","sorobanRpcUrl","C","isAllowed","O","setAllowed","R","getUserInfo","userInfo","i","I","requestAccess"],"sources":["webpack://freighterApi/webpack/universalModuleDefinition","webpack://freighterApi/webpack/bootstrap","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/constants/services.ts","webpack://freighterApi/webpack/runtime/define property getters","webpack://freighterApi/webpack/runtime/hasOwnProperty shorthand","webpack://freighterApi/webpack/runtime/make namespace object","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/api/helpers/extensionMessaging.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/getPublicKey.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@shared/api/external.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/signTransaction.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/signBlob.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/signAuthEntry.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/isConnected.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/getNetwork.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/getNetworkDetails.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/isAllowed.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/setAllowed.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/getUserInfo.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/requestAccess.ts","webpack://freighterApi/src/Users/piyalbasu/Stellar/lyra/@stellar/freighter-api/src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"freighterApi\"] = factory();\n\telse\n\t\troot[\"freighterApi\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","export enum SERVICE_TYPES {\n  CREATE_ACCOUNT = \"CREATE_ACCOUNT\",\n  FUND_ACCOUNT = \"FUND_ACCOUNT\",\n  ADD_ACCOUNT = \"ADD_ACCOUNT\",\n  IMPORT_ACCOUNT = \"IMPORT_ACCOUNT\",\n  IMPORT_HARDWARE_WALLET = \"IMPORT_HARDWARE_WALLET\",\n  LOAD_ACCOUNT = \"LOAD_ACCOUNT\",\n  MAKE_ACCOUNT_ACTIVE = \"MAKE_ACCOUNT_ACTIVE\",\n  UPDATE_ACCOUNT_NAME = \"UPDATE_ACCOUNT_NAME\",\n  GET_MNEMONIC_PHRASE = \"GET_MNEMONIC_PHRASE\",\n  CONFIRM_MNEMONIC_PHRASE = \"CONFIRM_MNEMONIC_PHRASE\",\n  CONFIRM_MIGRATED_MNEMONIC_PHRASE = \"CONFIRM_MIGRATED_MNEMONIC_PHRASE\",\n  RECOVER_ACCOUNT = \"RECOVER_ACCOUNT\",\n  CONFIRM_PASSWORD = \"CONFIRM_PASSWORD\",\n  REJECT_ACCESS = \"REJECT_ACCESS\",\n  GRANT_ACCESS = \"GRANT_ACCESS\",\n  SIGN_TRANSACTION = \"SIGN_TRANSACTION\",\n  SIGN_BLOB = \"SIGN_BLOB\",\n  SIGN_AUTH_ENTRY = \"SIGN_AUTH_ENTRY\",\n  HANDLE_SIGNED_HW_TRANSACTION = \"HANDLE_SIGNED_HW_TRANSACTION\",\n  REJECT_TRANSACTION = \"REJECT_TRANSACTION\",\n  SIGN_FREIGHTER_TRANSACTION = \"SIGN_FREIGHTER_TRANSACTION\",\n  SIGN_FREIGHTER_SOROBAN_TRANSACTION = \"SIGN_FREIGHTER_SOROBAN_TRANSACTION\",\n  ADD_RECENT_ADDRESS = \"ADD_RECENT_ADDRESS\",\n  LOAD_RECENT_ADDRESSES = \"LOAD_RECENT_ADDRESSES\",\n  SIGN_OUT = \"SIGN_OUT\",\n  SHOW_BACKUP_PHRASE = \"SHOW_BACKUP_PHRASE\",\n  SAVE_ALLOWLIST = \"SAVE_ALLOWLIST\",\n  SAVE_SETTINGS = \"SAVE_SETTINGS\",\n  LOAD_SETTINGS = \"LOAD_SETTINGS\",\n  GET_CACHED_ASSET_ICON = \"GET_CACHED_ASSET_ICON\",\n  CACHE_ASSET_ICON = \"CACHE_ASSET_ICON\",\n  GET_CACHED_ASSET_DOMAIN = \"GET_CACHED_ASSET_DOMAIN\",\n  CACHE_ASSET_DOMAIN = \"CACHE_ASSET_DOMAIN\",\n  GET_BLOCKED_ACCOUNTS = \"GET_BLOCKED_ACCOUNTS\",\n  GET_BLOCKED_DOMAINS = \"GET_BLOCKED_DOMAINS\",\n  ADD_CUSTOM_NETWORK = \"ADD_CUSTOM_NETWORK\",\n  CHANGE_NETWORK = \"CHANGE_NETWORK\",\n  REMOVE_CUSTOM_NETWORK = \"REMOVE_CUSTOM_NETWORK\",\n  EDIT_CUSTOM_NETWORK = \"EDIT_CUSTOM_NETWORK\",\n  RESET_EXP_DATA = \"RESET_EXP_DATA\",\n  ADD_TOKEN_ID = \"ADD_TOKEN_ID\",\n  GET_TOKEN_IDS = \"GET_TOKEN_IDS\",\n  REMOVE_TOKEN_ID = \"REMOVE_TOKEN_ID\",\n  GET_MIGRATABLE_ACCOUNTS = \"GET_MIGRATABLE_ACCOUNTS\",\n  GET_MIGRATED_MNEMONIC_PHRASE = \"GET_MIGRATED_MNEMONIC_PHRASE\",\n  MIGRATE_ACCOUNTS = \"MIGRATE_ACCOUNTS\",\n}\n\nexport enum EXTERNAL_SERVICE_TYPES {\n  REQUEST_ACCESS = \"REQUEST_ACCESS\",\n  REQUEST_PUBLIC_KEY = \"REQUEST_PUBLIC_KEY\",\n  SUBMIT_TRANSACTION = \"SUBMIT_TRANSACTION\",\n  SUBMIT_BLOB = \"SUBMIT_BLOB\",\n  SUBMIT_AUTH_ENTRY = \"SUBMIT_AUTH_ENTRY\",\n  REQUEST_NETWORK = \"REQUEST_NETWORK\",\n  REQUEST_NETWORK_DETAILS = \"REQUEST_NETWORK_DETAILS\",\n  REQUEST_CONNECTION_STATUS = \"REQUEST_CONNECTION_STATUS\",\n  REQUEST_ALLOWED_STATUS = \"REQUEST_ALLOWED_STATUS\",\n  SET_ALLOWED_STATUS = \"SET_ALLOWED_STATUS\",\n  REQUEST_USER_INFO = \"REQUEST_USER_INFO\",\n}\n\nexport const EXTERNAL_MSG_REQUEST = \"FREIGHTER_EXTERNAL_MSG_REQUEST\";\nexport const EXTERNAL_MSG_RESPONSE = \"FREIGHTER_EXTERNAL_MSG_RESPONSE\";\n\ndeclare const DEV_SERVER: string;\nconst _DEV_SERVER = DEV_SERVER;\nexport { _DEV_SERVER as DEV_SERVER };\n\ndeclare const DEV_EXTENSION: string;\nconst _DEV_EXTENSION = DEV_EXTENSION;\nexport { _DEV_EXTENSION as DEV_EXTENSION };\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import browser from \"webextension-polyfill\";\nimport {\n  DEV_SERVER,\n  EXTERNAL_MSG_RESPONSE,\n  EXTERNAL_MSG_REQUEST,\n  EXTERNAL_SERVICE_TYPES,\n  SERVICE_TYPES,\n} from \"../../constants/services\";\nimport { Response } from \"../types\";\n\ninterface Msg {\n  [key: string]: any;\n  type: EXTERNAL_SERVICE_TYPES | SERVICE_TYPES;\n}\n\nexport const sendMessageToContentScript = (msg: Msg): Promise<Response> => {\n  /* \n    In the case of multiple calls coming in sequentially, we use this MESSAGE_ID to make sure we're responding to\n    the appropriate message sender. Otherwise, we can run into race conditions where we simply resolve all \n    sent messages with the first thing that comes back.\n  */\n  const MESSAGE_ID = Date.now() + Math.random();\n\n  window.postMessage(\n    { source: EXTERNAL_MSG_REQUEST, messageId: MESSAGE_ID, ...msg },\n    window.location.origin,\n  );\n  return new Promise((resolve) => {\n    let requestTimeout = 0;\n\n    /* \n      In the case that Freighter is not installed at all, any messages to \n      background from freighter-api will hang forever and not respond in any way. \n      This is especially a problem for the isConnected method, because this is \n      likely to be called in a situation where Freighter isn't installed.\n      To prevent this, we add a timeout to automatically resolve in the event \n      Freighter doesn't respond in a timely fashion to this method.\n    */\n    if (\n      msg.type === EXTERNAL_SERVICE_TYPES.REQUEST_CONNECTION_STATUS ||\n      msg.type === EXTERNAL_SERVICE_TYPES.REQUEST_PUBLIC_KEY\n    ) {\n      requestTimeout = setTimeout(() => {\n        resolve({\n          isConnected: false,\n          publicKey: \"\",\n        } as Response);\n        window.removeEventListener(\"message\", messageListener);\n      }, 2000);\n    }\n\n    const messageListener = (event: { source: any; data: Response }) => {\n      // We only accept messages from ourselves\n      if (event.source !== window) return;\n      // Only respond to messages tagged as being from our content script\n      if (event?.data?.source !== EXTERNAL_MSG_RESPONSE) return;\n      // Only respond to messages that this instance of sendMessageToContentScript sent\n      if (event?.data?.messagedId !== MESSAGE_ID) return;\n\n      resolve(event.data);\n      window.removeEventListener(\"message\", messageListener);\n      clearTimeout(requestTimeout);\n    };\n    window.addEventListener(\"message\", messageListener, false);\n  });\n};\n\nexport const sendMessageToBackground = async (msg: Msg): Promise<Response> => {\n  let res;\n  if (DEV_SERVER) {\n    // treat this as an external call because we're making the call from the browser, not the popup\n    res = await sendMessageToContentScript(msg);\n  } else {\n    res = await browser.runtime.sendMessage(msg);\n  }\n\n  return res;\n};\n","import { requestPublicKey } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const getPublicKey = (): Promise<string> =>\n  isBrowser ? requestPublicKey() : Promise.resolve(\"\");\n","import { EXTERNAL_SERVICE_TYPES } from \"../constants/services\";\nimport { NetworkDetails } from \"../constants/stellar\";\nimport { sendMessageToContentScript } from \"./helpers/extensionMessaging\";\nimport { UserInfo } from \"./types\";\n\nexport const requestAccess = async (): Promise<string> => {\n  let response = { publicKey: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_ACCESS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { publicKey, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return publicKey;\n};\n\nexport const requestPublicKey = async (): Promise<string> => {\n  let response = { publicKey: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_PUBLIC_KEY,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { publicKey, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return publicKey;\n};\n\nexport const submitTransaction = async (\n  transactionXdr: string,\n  opts?:\n    | string\n    | {\n        network?: string;\n        accountToSign?: string;\n        networkPassphrase?: string;\n      },\n  accountToSign?: string,\n): Promise<string> => {\n  let network = \"\";\n  let _accountToSign = \"\";\n  let networkPassphrase = \"\";\n\n  /* \n  As of v1.3.0, this method now accepts an object as its second param. \n  Previously, it accepted optional second and third string parameters.\n  This logic maintains backwards compatibility for older versions\n  */\n  if (typeof opts === \"object\") {\n    network = opts.network || \"\";\n    _accountToSign = opts.accountToSign || \"\";\n    networkPassphrase = opts.networkPassphrase || \"\";\n  } else {\n    network = opts || \"\";\n    _accountToSign = accountToSign || \"\";\n  }\n\n  let response = { signedTransaction: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      transactionXdr,\n      network,\n      networkPassphrase,\n      accountToSign: _accountToSign,\n      type: EXTERNAL_SERVICE_TYPES.SUBMIT_TRANSACTION,\n    });\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n  const { signedTransaction, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return signedTransaction;\n};\n\nexport const submitBlob = async (\n  blob: string,\n  opts?: {\n    accountToSign?: string;\n  },\n): Promise<string> => {\n  let response = { signedBlob: \"\", error: \"\" };\n  const _opts = opts || {};\n  const accountToSign = _opts.accountToSign || \"\";\n  try {\n    response = await sendMessageToContentScript({\n      blob,\n      accountToSign,\n      type: EXTERNAL_SERVICE_TYPES.SUBMIT_BLOB,\n    });\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n  const { signedBlob, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return signedBlob;\n};\n\nexport const submitAuthEntry = async (\n  entryXdr: string,\n  opts?: {\n    accountToSign?: string;\n  },\n): Promise<string> => {\n  let response = { signedAuthEntry: \"\", error: \"\" };\n  const _opts = opts || {};\n  const accountToSign = _opts.accountToSign || \"\";\n  try {\n    response = await sendMessageToContentScript({\n      entryXdr,\n      accountToSign,\n      type: EXTERNAL_SERVICE_TYPES.SUBMIT_AUTH_ENTRY,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  const { signedAuthEntry, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return signedAuthEntry;\n};\n\nexport const requestNetwork = async (): Promise<string> => {\n  let response = { network: \"\", error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_NETWORK,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { network, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return network;\n};\n\nexport const requestNetworkDetails = async (): Promise<{\n  network: string;\n  networkUrl: string;\n  networkPassphrase: string;\n  sorobanRpcUrl?: string;\n}> => {\n  let response = {\n    networkDetails: {\n      network: \"\",\n      networkName: \"\",\n      networkUrl: \"\",\n      networkPassphrase: \"\",\n      sorobanRpcUrl: undefined,\n    } as NetworkDetails,\n    error: \"\",\n  };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_NETWORK_DETAILS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { networkDetails, error } = response;\n  const {\n    network,\n    networkUrl,\n    networkPassphrase,\n    sorobanRpcUrl,\n  } = networkDetails;\n\n  if (error) {\n    throw error;\n  }\n  return { network, networkUrl, networkPassphrase, sorobanRpcUrl };\n};\n\nexport const requestConnectionStatus = async (): Promise<boolean> => {\n  let response = {\n    isConnected: false,\n  };\n\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_CONNECTION_STATUS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response.isConnected;\n};\n\nexport const requestAllowedStatus = async (): Promise<boolean> => {\n  let response = {\n    isAllowed: false,\n  };\n\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_ALLOWED_STATUS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response.isAllowed;\n};\n\nexport const setAllowedStatus = async (): Promise<boolean> => {\n  let response = {\n    isAllowed: false,\n    error: \"\",\n  };\n\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.SET_ALLOWED_STATUS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { isAllowed, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return isAllowed;\n};\n\nexport const requestUserInfo = async (): Promise<UserInfo> => {\n  let response = { userInfo: { publicKey: \"\" }, error: \"\" };\n  try {\n    response = await sendMessageToContentScript({\n      type: EXTERNAL_SERVICE_TYPES.REQUEST_USER_INFO,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  const { userInfo, error } = response;\n\n  if (error) {\n    throw error;\n  }\n  return userInfo;\n};\n","import { submitTransaction } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const signTransaction = (\n  transactionXdr: string,\n  opts?: {\n    network?: string;\n    networkPassphrase?: string;\n    accountToSign?: string;\n  }\n): Promise<string> =>\n  isBrowser ? submitTransaction(transactionXdr, opts) : Promise.resolve(\"\");\n","import { submitBlob } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const signBlob = (\n  blob: string,\n  opts?: {\n    accountToSign?: string;\n  }\n): Promise<string> =>\n  isBrowser ? submitBlob(blob, opts) : Promise.resolve(\"\");\n","import { submitAuthEntry } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const signAuthEntry = (\n  entryXdr: string,\n  opts?: {\n    accountToSign?: string;\n  }\n): Promise<string> =>\n  isBrowser ? submitAuthEntry(entryXdr, opts) : Promise.resolve(\"\");\n","import { requestConnectionStatus } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const isConnected = (): Promise<boolean> => {\n  if (!isBrowser) return Promise.resolve(false);\n\n  if (window.freighter) {\n    return Promise.resolve(window.freighter);\n  }\n\n  return requestConnectionStatus();\n};\n","import { requestNetwork } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const getNetwork = (): Promise<string> =>\n  isBrowser ? requestNetwork() : Promise.resolve(\"\");\n","import { requestNetworkDetails } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const getNetworkDetails = (): Promise<{\n  network: string;\n  networkUrl: string;\n  networkPassphrase: string;\n  sorobanRpcUrl?: string;\n}> =>\n  isBrowser\n    ? requestNetworkDetails()\n    : Promise.resolve({\n        network: \"\",\n        networkUrl: \"\",\n        networkPassphrase: \"\",\n        sorobanRpcUrl: \"\",\n      });\n","import { requestAllowedStatus } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const isAllowed = (): Promise<boolean> =>\n  isBrowser ? requestAllowedStatus() : Promise.resolve(false);\n","import { setAllowedStatus } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const setAllowed = (): Promise<boolean> =>\n  isBrowser ? setAllowedStatus() : Promise.resolve(false);\n","import { requestUserInfo } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const getUserInfo = (): Promise<{ publicKey: string }> =>\n  isBrowser ? requestUserInfo() : Promise.resolve({ publicKey: \"\" });\n","import { requestAccess as requestAccessApi } from \"@shared/api/external\";\nimport { isBrowser } from \".\";\n\nexport const requestAccess = (): Promise<string> =>\n  isBrowser ? requestAccessApi() : Promise.resolve(\"\");\n","import { getPublicKey } from \"./getPublicKey\";\nimport { signTransaction } from \"./signTransaction\";\nimport { signBlob } from \"./signBlob\";\nimport { signAuthEntry } from \"./signAuthEntry\";\nimport { isConnected } from \"./isConnected\";\nimport { getNetwork } from \"./getNetwork\";\nimport { getNetworkDetails } from \"./getNetworkDetails\";\nimport { isAllowed } from \"./isAllowed\";\nimport { setAllowed } from \"./setAllowed\";\nimport { getUserInfo } from \"./getUserInfo\";\nimport { requestAccess } from \"./requestAccess\";\n\nexport const isBrowser = typeof window !== \"undefined\";\n\nexport {\n  getPublicKey,\n  signTransaction,\n  signBlob,\n  signAuthEntry,\n  isConnected,\n  getNetwork,\n  getNetworkDetails,\n  isAllowed,\n  setAllowed,\n  getUserInfo,\n  requestAccess,\n};\nexport default {\n  getPublicKey,\n  signTransaction,\n  signBlob,\n  signAuthEntry,\n  isConnected,\n  getNetwork,\n  getNetworkDetails,\n  isAllowed,\n  setAllowed,\n  getUserInfo,\n  requestAccess,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}